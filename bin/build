#!/usr/bin/env python3
# coding=utf-8

'''resources-viewer
'''

# Standard library imports.
import sys
import os
import atexit
import gc
import logging
import argparse
import json
import inspect
from pprint import pprint
from itertools import chain
from subprocess import Popen, PIPE
from os.path import abspath, dirname, join, basename
from os import mkdir
from shutil import copytree

# Related third party imports.
from pysyspol.util import getdir

# Configuration and GLOBAL CONSTANT names.
PN = os.path.splitext(os.path.basename(sys.argv[0]))[0]
SCRIPT_DIR = getdir(inspect.currentframe())
configfp = join(dirname(SCRIPT_DIR), 'package.json')
with open(configfp) as f:
    CFG = json.load(f)['config']
LOG_FMT = CFG['log_format'].format(PN)

def on_exit():
    gc.collect()

def validate_args(args):
    assert args.data
    assert args.metadata

def get_tagged_resources(metadata, tags):
    for tag in tags:
        for resource in metadata:
            if tag in resource['tags']:
                yield resource

def build_index(data):
    viewerfp = abspath(args.viewer)
    tags = sorted(list(data.keys()))
    tag_pages_links = [CFG['tag_link_tmpl'].format(tag=tag) for tag in tags]
    tag_pages = CFG['tag_links_tmpl'].format(tags=''.join(tag_pages_links))

    with open(join(SCRIPT_DIR, '..', CFG['includes'], CFG['uri']['home'])) as f:
        indexdata = f.read().format(title=CFG['title'], tag_pages=tag_pages)
    with open(join(viewerfp, CFG['uri']['home']), 'w') as f:
        f.write(indexdata)

    stylesheetsfp = join(SCRIPT_DIR, '..', CFG['stylesheets'])
    copytree(stylesheetsfp, join(viewerfp, CFG['stylesheets']))
    logging.info('Written index page')

def build_tag_pages(data):
    tags = data.keys()
    templatefp = join(SCRIPT_DIR, '..', CFG['includes'], CFG['tag_tmpl'])
    mkdir(join(abspath(args.viewer), CFG['uri']['tags']))

    for tag in tags:
        pagefp = join(abspath(args.viewer), CFG['uri']['tags'], tag+'.html')
        with open(templatefp) as f:
            templatef = f.read().format(title=CFG['title'], tag=tag)
        with open(pagefp, 'w') as f:
            f.write(templatef)

    logging.info('Written tag pages')

def build_resource_pages(metadata):
    mkdir(join(abspath(args.viewer), CFG['uri']['resources']))
    templatefp = join(SCRIPT_DIR, '..', CFG['includes'], CFG['resource_tmpl'])
    rsrcuris = [rsrcuri.replace('/', '-') for rsrcuri in
        set(chain.from_iterable(rsrc['path'] for rsrc in metadata))]

    for rsrcuri in rsrcuris:
        pagefp = join(abspath(args.viewer),
                CFG['uri']['resources'], rsrcuri+'.html')
        with open(templatefp) as f:
            templatef = f.read().format(title=CFG['title'], resource=rsrcuri)
        with open(pagefp, 'w') as f:
            f.write(templatef)

    logging.info('Written resource pages')

# Setup
logging.basicConfig(format=CFG['log_format'].format(PN), level=logging.INFO)
parser = argparse.ArgumentParser()
parser.add_argument('data')
parser.add_argument('metadata')
parser.add_argument('viewer')
args = parser.parse_args()

validate_args(args)
atexit.register(on_exit)

with open(args.metadata) as f:
    metadata = json.load(f)

tags = list(set(chain.from_iterable(i['tags'] for i in metadata)))

resources_by_tag = {}
for tag in tags:
    resources_by_tag[tag] = [
            resource for resource in get_tagged_resources(metadata, (tag,))]

build_resource_pages(metadata)
build_tag_pages(resources_by_tag)
build_index(resources_by_tag)

# vim: ft=python
