#!/usr/bin/env python3
# coding=utf-8

'''resources-viewer
'''

# Standard library imports.
import sys
import os
import atexit
import gc
import re
import logging
import argparse
import json
import inspect
from pprint import pprint
from itertools import chain
from subprocess import Popen, PIPE
from os.path import abspath, dirname, join, basename
from os import mkdir, listdir
from shutil import copytree
from glob import glob
from fnmatch import fnmatch, translate

# Related third party imports.
from pysyspol.util import getdir
from pysyspol.medasys import get_tagged_resources, logging_config

# Configuration and GLOBAL CONSTANT names.
SCRIPT_DIR = getdir(inspect.currentframe())
configfp = join(dirname(SCRIPT_DIR), 'package.json')
with open(configfp) as f:
    CFG = json.load(f)['config']

def on_exit():
    gc.collect()

def validate_args(args):
    assert args.data
    assert args.metadata

def build_index(data):
    viewerfp = abspath(args.viewer)
    tags = sorted(list(data.keys()))
    tag_pages_links = [CFG['tag_link_tmpl'].format(tag=tag) for tag in tags]
    tag_pages = CFG['tag_links_tmpl'].format(tags=''.join(tag_pages_links))

    with open(join(SCRIPT_DIR, '..', CFG['includes'], CFG['uri']['home'])) as f:
        indexdata = f.read().format(title=CFG['title'], tag_pages=tag_pages)
    with open(join(viewerfp, CFG['uri']['home']), 'w') as f:
        f.write(indexdata)

    stylesheetsfp = join(SCRIPT_DIR, '..', CFG['stylesheets'])
    copytree(stylesheetsfp, join(viewerfp, CFG['stylesheets']))
    logging.info('Written index page')

def build_tag_pages(data):
    tags = data.keys()
    templatefp = join(SCRIPT_DIR, '..', CFG['includes'], CFG['tag_tmpl'])
    mkdir(join(abspath(args.viewer), CFG['uri']['tags']))

    for tag in tags:
        pagefp = join(abspath(args.viewer), CFG['uri']['tags'], tag+'.html')
        rsrcs = [x[0] for x in get_resource_uris(data[tag])]
        rsrcs_ul = ''.join(CFG['resource_link_tmpl'].format(resource=rsrc)
                for rsrc in rsrcs)
        with open(templatefp) as f:
            templatef = f.read().format(title=CFG['title'], tag=tag,
                    resources=CFG['resource_links_tmpl'].format(resources=rsrcs_ul))
        with open(pagefp, 'w') as f:
            f.write(templatef)

    logging.info('Written tag pages')

def build_resource_pages(metadata, datafp):
    mkdir(join(abspath(args.viewer), CFG['uri']['resources']))
    templatefp = join(SCRIPT_DIR, '..', CFG['includes'], CFG['resource_tmpl'])

    # Path from resources pages to app home
    rel = ['..'] * (CFG['uri']['resources'].rstrip('/').count('/') + 1)
    rel = '/'.join(rel)

    for rsrcuri, desc in get_resource_uris(metadata):
        pagefp = join(abspath(args.viewer),
                CFG['uri']['resources'], rsrcuri+'.html')
        rsrcsfp = join(datafp, rsrcuri.replace('-', '/'))
        rsrcss = set()
        for ext in CFG['resource_exts']:
            reobj = re.compile(translate('*.' + ext), re.IGNORECASE)
            rsrcss.update(set(
                join(rel, rsrcsfp, f) for f in listdir(rsrcsfp) if reobj.match(f)))

        images = [CFG['resource_img'].format(uri=rsrcs) for rsrcs in rsrcss]

        with open(templatefp) as f:
            templatef = f.read().format(title=CFG['title'], resource=rsrcuri,
                    images=''.join(images), desc=desc)
        with open(pagefp, 'w') as f:
            f.write(templatef)

    logging.info('Written resource pages')

def get_resource_uris(rsrcs):
    rt = set()
    for rsrc in rsrcs:
        for rsrcuri in rsrc['path']:
            rsrcuri = rsrcuri.replace('/', '-')
            desc = "\n".join(rsrc['desc'])
            rt.add((rsrcuri, desc))
    return list(rt)

# Setup
logging_config()
parser = argparse.ArgumentParser()
parser.add_argument('data')
parser.add_argument('metadata')
parser.add_argument('viewer')
args = parser.parse_args()

validate_args(args)
atexit.register(on_exit)

with open(args.metadata) as f:
    metadata = json.load(f)

tags = list(set(chain.from_iterable(i['tags'] for i in metadata)))

resources_by_tag = {}
for tag in tags:
    resources_by_tag[tag] = [
            resource for resource in get_tagged_resources(metadata, (tag,))]

build_resource_pages(metadata, args.data)
build_tag_pages(resources_by_tag)
build_index(resources_by_tag)

#pprint(metadata)
#pprint(resources_by_tag)

# vim: ft=python
